{"version":3,"sources":["components/forms/TaskForm.js"],"names":["Option","Select","Form","create","_ref","form","setTaskFormRef","resetTaskFormState","setResetTaskFormState","editableTask","tags","_useState","useState","_useState2","Object","_home_junior_projetos_react_todo_list_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","preparingFormData","setPreparingFormData","FormItem","Item","getFieldDecorator","useEffect","resetFields","delay","then","editableData","setFieldsValue","description","id","time","moment","durationTime","rememberTime","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","antd__WEBPACK_IMPORTED_MODULE_4__","spinning","antd__WEBPACK_IMPORTED_MODULE_3__","antd__WEBPACK_IMPORTED_MODULE_5__","type","antd__WEBPACK_IMPORTED_MODULE_6__","gutter","antd__WEBPACK_IMPORTED_MODULE_7__","sm","label","initialValue","rules","required","message","antd__WEBPACK_IMPORTED_MODULE_8__","locale","showTime","placeholder","antd__WEBPACK_IMPORTED_MODULE_9__","min","length","antd__WEBPACK_IMPORTED_MODULE_2__","mode","style","width","optionFilterProp","map","tag","key","value","name"],"mappings":"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","file":"static/js/9.23756336.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n  Form,\n  Row,\n  Col,\n  Select,\n  Input,\n  Spin, DatePicker, InputNumber\n} from 'antd';\nimport {delay, } from '../../utility/Utils';\nimport locale from 'antd/lib/date-picker/locale/pt_BR';\nimport moment from 'moment';\n\nconst Option = Select.Option;\n\nconst TaskForm = (\n  {\n    form,\n    setTaskFormRef,\n    resetTaskFormState,\n    setResetTaskFormState,\n    editableTask,\n    tags,\n  }\n) => {\n  const [preparingFormData, setPreparingFormData] = useState(false);\n\n  const FormItem = Form.Item;\n  const { getFieldDecorator } = form;\n\n  useEffect(() => {\n    setTaskFormRef(form);\n    setResetTaskFormState(true);\n  }, []);\n\n  useEffect(() => {\n    if (resetTaskFormState) {\n      resetForm();\n    }\n  }, [resetTaskFormState]);\n\n  useEffect(() => {\n    if (editableTask) {\n      delay(500).then(() => {\n        prepareFormToEdit(editableTask);\n      });\n    }\n  }, [editableTask]);\n\n  function prepareFormToEdit(editableData) {\n    setPreparingFormData(true);\n\n    form.setFieldsValue({\n      'description': editableData.description,\n      'id': editableData.id,\n      'time': moment(editableData.time),\n      'durationTime': editableData.durationTime,\n      'rememberTime': editableData.rememberTime,\n      'tags': editableData.tags,\n    });\n\n    delay(500).then(() => {\n      setPreparingFormData(false);\n    });\n  }\n\n  function resetForm() {\n    form.resetFields();\n    setResetTaskFormState(false);\n  }\n\n  function renderTagsOptions() {\n    return tags.map(tag => <Option key={tag.id} value={tag.id}>{tag.name}</Option>);\n  }\n\n  return (\n    <Spin spinning={preparingFormData}>\n      <Form>\n        {getFieldDecorator('id')(\n          <Input type='hidden'/>\n        )}\n        <Row gutter={15}>\n          <Col sm={12}>\n            <FormItem label=\"Descrição\">\n              {getFieldDecorator('description', {\n                initialValue: '',\n                rules: [{required: true, message: 'Por favor informe uma descrição.'}]\n              })(\n                <Input/>\n              )}\n            </FormItem>\n          </Col>\n          <Col sm={12}>\n            <FormItem label=\"Data\">\n              {getFieldDecorator('time', {\n                rules: [{required: true, message: 'Por favor informe a data e hora da tarefa'}]\n              })(\n                <DatePicker\n                  locale={locale}\n                  showTime\n                  placeholder=\"Selecione...\"\n                />\n              )}\n            </FormItem>\n          </Col>\n        </Row>\n        <Row gutter={15}>\n          <Col sm={12}>\n            <FormItem label=\"Duração da tarefa (em horas)\">\n              {getFieldDecorator('durationTime', {\n                initialValue: 1,\n                rules: [{required: true, message: 'Por favor informe uma duração'}]\n              })(\n                <InputNumber min={1} />\n              )}\n            </FormItem>\n          </Col>\n          <Col sm={12}>\n            <FormItem label=\"Tempo para lembrete (em horas)\">\n              {getFieldDecorator('rememberTime', {\n                initialValue: 0,\n                rules: [{required: true, message: 'Por favor informe quantas horas antes você deseja ser lembrado'}]\n              })(\n                <InputNumber min={0} />\n              )}\n            </FormItem>\n          </Col>\n        </Row>\n        {\n          tags && tags.length\n            && (\n            <Row gutter={15}>\n              <Col sm={24}>\n                <FormItem label=\"Tags\">\n                  {getFieldDecorator('tags')(\n                    <Select\n                      mode=\"multiple\"\n                      style={{ width: '100%' }}\n                      placeholder=\"Por favor selecione\"\n                      optionFilterProp=\"children\"\n                    >\n                      {renderTagsOptions()}\n                    </Select>\n                  )}\n                </FormItem>\n              </Col>\n            </Row>\n            )\n        }\n      </Form>\n    </Spin>\n  );\n};\n\nexport default Form.create()(TaskForm);\n"],"sourceRoot":""}