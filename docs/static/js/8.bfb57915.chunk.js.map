{"version":3,"sources":["components/generics/AppHeader.js","components/todo-list/todo-list-item/TodoListItem.js","components/todo-list/TodoList.js","components/todo-list/todo-list-filter/TodoListFilter.js","pages/TodoListPage.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","memo","_ref","title","a","createElement","task","_ref$onToggleCheckIte","onToggleCheckItem","_ref$onDeleteItem","onDeleteItem","_ref$onEditItem","onEditItem","date","moment","time","buttonIconType","status","taskStatus","PENDING","buttonTitle","react_default","card","className","DONE","isLate","key","id","format","actions","icon","type","onClick","style","width","marginBottom","lib_default","minHeight","text","description","maxLine","tasks","loading","onToggleCheckItemHandler","onDeleteItemHandler","onEditItemHandler","react","list","grid","gutter","sm","md","lg","xl","dataSource","locale","emptyText","renderItem","Item","todo_list_item_TodoListItem","_ref$tasks","_ref$onFilter","onFilter","_useState","useState","filterTasksMode","ALL","_useState2","Object","slicedToArray","filterBy","setFilterBy","_useState3","_useState4","filterByTime","setFilterByTime","_useState5","_useState6","filteredData","setFilteredData","useEffect","TasksUtils","then","data","es_radio","Group","value","onChange","ev","target","delay","Button","TODAY","THIS_WEEK","THIS_MONTH","TaskForm","lazy","Promise","all","e","bind","connectedComponent","connect","_ref2","tags","dispatch","callInsertNewTask","values","insertNewTaskAction","callUpdateTask","updateTaskAction","callToggleTaskStatus","taskId","toggleTaskStatusAction","callDeleteTask","deleteTaskAction","sortBy","require","sorteredTasks","sort","taskFormRef","setTaskFormRef","resetTaskFormState","setResetTaskFormState","showTaskFormModal","setShowTaskFormModal","_useState7","_useState8","taskToEdit","setTaskToEdit","_useState9","_useState10","editableTask","setEditableTask","_useState11","_useState12","filteredTasks","setFilteredTasks","onCancelTaskForm","clearEditableData","AppHeader","es_button","modal","visible","onCancel","top","bodyStyle","maxHeight","overflow","footer","validateFields","err","toISOString","fallback","spin","objectSpread","todo_list_filter_TodoListFilter","todo_list_TodoList","fetch","itemId","find"],"mappings":"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","file":"static/js/8.bfb57915.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport PropTypes from \"prop-types\";\n\nfunction AppHeader(\n  {\n    title\n  }\n) {\n  return (\n    <header>\n      <h1>{title}</h1>\n    </header>\n  )\n}\n\nAppHeader.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nexport default memo(AppHeader);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Icon } from 'antd';\nimport Task from '../../../classes/Task';\nimport { taskStatus } from '../../../shared/tasksConstantes';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport moment from 'moment';\n\nexport function TodoListItem (\n  {\n    task,\n    onToggleCheckItem = () => {},\n    onDeleteItem = () => {},\n    onEditItem = () => {},\n  }\n) {\n  const date = moment(task.time);\n  const buttonIconType = task.status === taskStatus.PENDING ? 'check' : 'stop';\n  const buttonTitle = task.status === taskStatus.PENDING ? 'marcar como Feito!' : 'marcar como Pendente!';\n\n  return (\n    <Card\n      className={[\n        'task-card',\n        task.status === taskStatus.DONE && '--is-done',\n        (task.isLate() && task.status !== taskStatus.DONE) && '--is-late'\n      ]}\n      key={task.id}\n      title={date.format(\"DD/MM/YYYY\")}\n      actions={[\n        <span title={buttonTitle}>\n          <Icon className='icon-state' type={buttonIconType} onClick={() => onToggleCheckItem(task.id)} />\n        </span>,\n        <span title=\"editar\">\n          <Icon className='icon-edit' type=\"edit\" onClick={() => onEditItem(task.id)} />\n        </span>,\n        <span title=\"excluir\">\n          <Icon className='icon-delete' type=\"delete\" onClick={() => onDeleteItem(task.id)} />\n        </span>\n      ]}\n      style={{ width: '100%', marginBottom: 15 }}\n    >\n      <LinesEllipsis\n        style={{minHeight: '70px'}}\n        text={task.description}\n        maxLine={3}\n      />\n    </Card>\n  );\n}\n\nTodoListItem.propTypes = {\n  task: PropTypes.instanceOf(Task).isRequired,\n  onToggleCheckItem: PropTypes.func,\n  onDeleteItem: PropTypes.func,\n  onEditItem: PropTypes.func,\n};\n\nexport default memo(TodoListItem);\n","import React, { Fragment, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'antd';\nimport TodoListItem from './todo-list-item/TodoListItem';\nimport Task from '../../classes/Task';\n\nfunction TodoList(\n    {\n        tasks,\n        loading,\n        onToggleCheckItemHandler,\n        onDeleteItemHandler,\n        onEditItemHandler,\n    }\n) {\n\n\n    const renderTaskListItem = task => {\n        return (\n            <List.Item>\n                <TodoListItem\n                  task={task}\n                  onToggleCheckItem={onToggleCheckItemHandler}\n                  onDeleteItem={onDeleteItemHandler}\n                  onEditItem={onEditItemHandler}\n                />\n            </List.Item>\n        )\n    };\n\n    return (\n      <Fragment>\n        <List\n          grid={{\n            gutter: 16, sm: 1, md: 2, lg: 3, xl: 4\n          }}\n          dataSource={tasks}\n          loading={loading}\n          locale={{emptyText: 'Nenhuma task foi encontrada'}}\n          renderItem={renderTaskListItem}/>\n      </Fragment>\n    );\n}\n\nTodoList.propTypes = {\n    tasks: PropTypes.arrayOf(PropTypes.instanceOf(Task)).isRequired,\n    loading: PropTypes.bool.isRequired,\n    onToggleCheckItemHandler: PropTypes.func,\n    onDeleteItemHandler: PropTypes.func,\n    onEditItemHandler: PropTypes.func,\n};\n\nexport default memo(TodoList);\n","import React, { Fragment, useEffect, useState, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { filterTasksMode } from '../../../shared/tasksConstantes';\nimport TasksUtils from '../../../utility/TasksUtils';\nimport { Radio } from 'antd';\nimport { delay } from '../../../utility/Utils';\nimport Task from '../../../classes/Task';\n\nfunction TodoListFilter(\n  {\n    tasks = [],\n    onFilter = () => {},\n  }\n) {\n\n  const [filterBy, setFilterBy] = useState(filterTasksMode.ALL);\n  const [filterByTime, setFilterByTime] = useState(filterTasksMode.ALL);\n  const [filteredData, setFilteredData] = useState(tasks);\n\n  function filterData() {\n    TasksUtils.filterBy(tasks, filterBy)\n      .then(data => {\n        onFilter(data);\n        setFilteredData(data);\n      });\n  }\n\n  function filterDataByTime() {\n    TasksUtils.filterBy(filteredData, filterByTime)\n      .then(data => {\n        onFilter(data);\n      });\n  }\n\n  function onFilterModeHandler(ev) {\n    setFilterBy(ev.target.value);\n    delay(300).then(() => {\n      setFilterByTime(filterTasksMode.ALL);\n    });\n  }\n\n  function onFilterByTimeHandler(ev) {\n    setFilterByTime(ev.target.value);\n  }\n\n  useEffect(() => {\n    filterData();\n  }, [filterBy]);\n\n  useEffect(() => {\n    filterDataByTime();\n  }, [filterByTime]);\n\n  return (\n    <Fragment>\n      <div className=\"toolbar-area\">\n        <Radio.Group value={filterBy} onChange={onFilterModeHandler}>\n          <Radio.Button value={filterTasksMode.ALL}>Todos</Radio.Button>\n          <Radio.Button value={filterTasksMode.DONE}>Realizadas</Radio.Button>\n          <Radio.Button value={filterTasksMode.PENDING}>Não realizadas</Radio.Button>\n        </Radio.Group>\n      </div>\n\n      <div>\n        <Radio.Group value={filterByTime} onChange={onFilterByTimeHandler}>\n          <Radio.Button value={filterTasksMode.ALL}>Todo o período</Radio.Button>\n          <Radio.Button value={filterTasksMode.TODAY}>Hoje</Radio.Button>\n          <Radio.Button value={filterTasksMode.THIS_WEEK}>Essa semana</Radio.Button>\n          <Radio.Button value={filterTasksMode.THIS_MONTH}>Esse mês</Radio.Button>\n        </Radio.Group>\n      </div>\n\n    </Fragment>\n  );\n}\n\nTodoListFilter.propTypes = {\n  tasks: PropTypes.arrayOf(PropTypes.instanceOf(Task)).isRequired,\n  onFilter: PropTypes.func\n};\n\nexport default memo(TodoListFilter);\n","import React, { Fragment, lazy, Suspense, useState, memo } from 'react';\nimport AppHeader from \"../components/generics/AppHeader\";\nimport { connect } from \"react-redux\";\nimport { deleteTaskAction, insertNewTaskAction, toggleTaskStatusAction, updateTaskAction } from '../ducks/tasks';\nimport TodoList from '../components/todo-list/TodoList';\nimport { Button, Modal, Spin } from 'antd';\nimport TodoListFilter from '../components/todo-list/todo-list-filter/TodoListFilter';\n\nconst TaskForm = lazy(() => import('../components/forms/TaskForm'));\n\nfunction TodoListPage(\n  {\n    tasks,\n    tags,\n    callToggleTaskStatus,\n    callDeleteTask,\n    callInsertNewTask,\n    callUpdateTask,\n  }\n) {\n  const sortBy = require('sort-by');\n  const sorteredTasks = tasks.data.sort(sortBy('time'));\n\n  const [taskFormRef, setTaskFormRef] = useState(false);\n  const [resetTaskFormState, setResetTaskFormState] = useState(false);\n  const [showTaskFormModal, setShowTaskFormModal] = useState(false);\n  const [taskToEdit, setTaskToEdit] = useState(false);\n  const [editableTask, setEditableTask] = useState(false);\n  const [filteredTasks, setFilteredTasks] = useState(sorteredTasks);\n\n  function toggleCheckItemHandler(itemId) {\n    callToggleTaskStatus(itemId);\n  }\n\n  function deleteItemHandler(itemId) {\n    callDeleteTask(itemId);\n  }\n\n  function editItemHandler(itemId) {\n    setTaskToEdit(itemId);\n    setEditableTask(tasks.data.find(task => task.id === itemId));\n    setShowTaskFormModal(true);\n  }\n\n  function addNewTaskButtonClickHandler() {\n    clearEditableData();\n    setShowTaskFormModal(true);\n  }\n\n  function onCancelTaskForm() {\n    setResetTaskFormState(true);\n    clearEditableData();\n    setShowTaskFormModal(false);\n  }\n\n  function clearEditableData() {\n    setTaskToEdit(false);\n    setEditableTask(false);\n  }\n\n  function saveTaskForm() {\n    if (taskFormRef) {\n      taskFormRef.validateFields((err, values) => {\n        if (!err) {\n          values.time = values.time.toISOString();\n\n          if (taskToEdit) {\n            callUpdateTask(values);\n\n          } else {\n            callInsertNewTask(values);\n          }\n\n          onCancelTaskForm();\n        }\n      });\n    }\n  }\n\n  return (\n    <Fragment>\n      <AppHeader title=\"Todo list\"/>\n      <div className=\"toolbar-area text-align-right\">\n        <Button onClick={addNewTaskButtonClickHandler} type=\"primary\" icon=\"plus\">Nova task</Button>\n      </div>\n      <Modal\n        visible={showTaskFormModal}\n        onCancel={onCancelTaskForm}\n        title={false ? 'Editando o item' : 'Novo item'}\n        style={{top: 30}}\n        bodyStyle={{maxHeight: '65vh', overflow: 'auto'}}\n        footer={[\n          <Button key=\"back\" onClick={onCancelTaskForm}>Cancelar</Button>,\n          <Button key=\"submit\" type=\"primary\" onClick={saveTaskForm}>Salvar</Button>,\n        ]}\n      >\n        <Suspense\n          fallback={<Spin />}\n        >\n          <TaskForm\n            tags={tags.data}\n            editableTask={editableTask && {...editableTask}}\n            setTaskFormRef={setTaskFormRef}\n            resetTaskFormState={resetTaskFormState}\n            setResetTaskFormState={setResetTaskFormState}\n          />\n        </Suspense>\n      </Modal>\n\n      <div className=\"toolbar-area\">\n        <TodoListFilter\n          tasks={sorteredTasks}\n          onFilter={setFilteredTasks}\n        />\n      </div>\n\n      <TodoList\n        tasks={filteredTasks}\n        loading={tasks.loading.fetch}\n        onToggleCheckItemHandler={toggleCheckItemHandler}\n        onDeleteItemHandler={deleteItemHandler}\n        onEditItemHandler={editItemHandler}\n      />\n    </Fragment>\n  )\n}\n\nconst connectedComponent = connect(\n  ({tasks, tags}) => {\n    return {tasks, tags}\n  },\n  (dispatch => {\n    return {\n      callInsertNewTask(values) {\n        dispatch(insertNewTaskAction(values));\n      },\n      callUpdateTask(values) {\n        dispatch(updateTaskAction(values));\n      },\n      callToggleTaskStatus(taskId) {\n        dispatch(toggleTaskStatusAction(taskId));\n      },\n      callDeleteTask(taskId) {\n        dispatch(deleteTaskAction(taskId));\n      }\n    }\n  })\n)(TodoListPage);\n\nexport default memo(connectedComponent);\n"],"sourceRoot":""}