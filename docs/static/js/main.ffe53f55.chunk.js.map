{"version":3,"sources":["classes/Task.js","utility/Utils.js","classes/Tag.js","shared/tasksConstantes.js","ducks/tasks.js","App.js","serviceWorker.js","index.js","ducks/tags.js","utility/TasksUtils.js","shared/timeConstants.js","integrations/NotificationAPI.js","rootReducer.js","integrations/Defaults.js","integrations/TasksAPI.js","sagas/tasksSaga.js","integrations/TagsAPI.js","shared/tagsConstantes.js","utility/TagsUtils.js","sagas/tagsSaga.js","rootSaga.js","store.js","shared/tasksFilterMethods.js"],"names":["Task","status","arguments","length","undefined","taskStatus","PENDING","description","time","durationTime","rememberTime","tags","createdAt","id","Object","_home_junior_projetos_react_todo_list_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","date","Date","now","toISOString","getTime","__webpack_require__","d","__webpack_exports__","delay","Promise","resolve","setTimeout","Tag","name","taskMessages","filterTasksMode","DONE","LOAD_TASK_ERROR","ERROR_ON_TOGGLE_STATUS","ERROR_ON_DELETE_TASK","UPDATE_TASK_SUCCESSFULLY","DELETE_TASK_SUCCESSFULLY","INSERT_NEW_TASK_SUCCESSFULLY","INSERT_NEW_TASK_ERROR","UPDATE_TASK_ERROR","FETCH_TASKS_FAILED","ALL","TODAY","THIS_WEEK","THIS_MONTH","FETCH_TASKS","FETCH_TASKS_SUCCESS","UPDATE_TASKS_ON_LIST","TOGGLE_TASK_STATUS","DELETE_TASK","INSERT_NEW_TASK","UPDATE_TASK","INITIAL_STATE","data","errors","fetch","loading","fetchTasksAction","type","fetchTasksSuccessAction","tasks","fetchTasksFailedAction","updateTasksOnListAction","toggleTaskStatusAction","taskId","deleteTaskAction","updateTaskAction","values","insertNewTaskAction","state","action","_home_junior_projetos_react_todo_list_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","DashboardPage","lazy","e","then","bind","TodoListPage","all","TagsPage","Sider","Layout","Content","connect","_ref2","dispatch","callFetchTasks","callFetchTags","fetchTagsAction","_ref","selectedLink","window","location","pathname","replace","_useState","useState","_useState2","slicedToArray","initialized","setInitialized","useEffect","react_default","a","createElement","react_router_dom","layout","className","menu","theme","defaultSelectedKeys","mode","Item","key","icon","to","react","fallback","spin","react_router","exact","path","component","appInitialized","Boolean","hostname","match","NotificationAPI","initialize","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FETCH_TAGS","FETCH_TAGS_SUCCESS","FETCH_TAGS_FAILED","UPDATE_TAGS_ON_LIST","DELETE_TAG","INSERT_NEW_TAG","fetchTagsSuccessAction","fetchTagsFailedAction","updateTagsOnListAction","deleteTagAction","tagId","insertNewTagAction","TasksUtils","method","filteredData","filterMethods","setInterval","getState","nowTime","forEach","task","taskOriginalDate","moment","taskRememberTime","subtract","valueOf","notify","concat","format","aMinute","aSecond","Notification","permission","requestPermission","title","message","timeToClose","notification","body","close","rootReducer","combineReducers","apiEndpoint","fetchTasksUrl","fetchTagsUrl","TasksAPI","reject","json","catch","fetchTasks","toggleTaskStatus","deleteTask","insertNewTask","updateTask","fetchTasksSaga","toggleTaskStatusSaga","deleteTaskSaga","insertNewTaskSaga","updateTaskSaga","regenerator_default","wrap","_context","prev","next","call","sent","map","taskFactory","put","initializeNotifier","t0","error","stop","_marked","updatedTasks","_context2","toggleStatus","success","warning","_marked2","filteredTasks","_context3","filter","_marked3","_ref3","taskToSave","modifiedTasks","_context4","toConsumableArray","push","_marked4","_ref4","_context5","_marked5","_context6","takeLatest","_marked6","_context7","_marked7","_context8","_marked8","_context9","_marked9","_context10","_marked10","_callee","_context11","fork","_marked11","TagsAPI","tagMessages","LOAD_TAG_ERROR","ERROR_ON_DELETE_TAG","UPDATE_TAG_SUCCESSFULLY","DELETE_TAG_SUCCESSFULLY","INSERT_NEW_TAG_SUCCESSFULLY","INSERT_NEW_TAG_ERROR","UPDATE_TAG_ERROR","TagsUtils","fetchTags","deleteTag","insertNewTag","fetchTagsSaga","deleteTagSaga","insertNewTagSaga","tag","tagFactory","tagsSaga_marked","filteredTags","tagsSaga_marked2","tagToSave","modifiedTags","console","log","tagsSaga_marked3","tagsSaga_marked4","tagsSaga_marked5","tagsSaga_marked6","tagsSaga_callee","tagsSaga_marked7","rootSaga","tasksSaga","tagsSaga","rootSaga_marked","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","_tasksConstantes__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_1__","moment__WEBPACK_IMPORTED_MODULE_1___default","n","methods","item","itemTime","getDate","getMonth","getFullYear","currentWeekDay","getDay","daysLimitBefore","daysLimitAfter","daysBeforeTime","daysAfterTime","add","today","currentMonth","currentYear","itemDate"],"mappings":"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","file":"static/js/main.ffe53f55.chunk.js","sourcesContent":["import { taskStatus } from '../shared/tasksConstantes';\n\nexport default class Task {\n  constructor(\n    status = taskStatus.PENDING,\n    description,\n    time,\n    durationTime,\n    rememberTime,\n    tags = [],\n    createdAt = false,\n    id = false\n  ) {\n    const date = createdAt ? new Date(createdAt) : new Date();\n    const now = date.toISOString();\n\n    this.status = status;\n    this.description = description;\n    this.time = time;\n    this.durationTime = durationTime;\n    this.rememberTime = rememberTime;\n    this.tags = tags;\n    this.createdAt = now;\n    this.id = id ? +id : date.getTime();\n  }\n\n  isLate() {\n    const time = +new Date(this.time);\n    const now = +new Date();\n\n    return (time - now) < 0;\n  }\n\n}\n","export const delay = time => {\n  return new Promise(resolve => {\n    setTimeout(resolve, time);\n  });\n};\n\nexport const onlyNumbers = (e, limit) => {\n  let { value } = e.target;\n\n  value = value.replace(/[a-zA-Z*+-.?!´`~''\"\"/\\\\]/, \"\");\n  if (limit) {\n    const regLimit = new RegExp('([0-9]{' + limit + '})(.*)');\n    value = value.replace(regLimit, \"$1\");\n  }\n\n  e.target.value = value;\n};\n\nexport const clearCharacters = (e) => {\n  let { value } = e.target;\n\n  value = value.replace(/[.\\-!?_() ]/g, '');\n\n  e.target.value = value;\n};\n","export default class Tag {\n  constructor(name, createdAt = false, id = false) {\n    const date = createdAt ? new Date(createdAt) : new Date();\n    const now = date.toISOString();\n\n    this.name = name;\n    this.createdAt = now;\n    this.id = id ? +id : date.getTime();\n  }\n}\n","export const taskStatus = {\n  PENDING: 'pending',\n  DONE: 'done'\n};\n\nexport const taskMessages = {\n  LOAD_TASK_ERROR: 'Não foi possível carregar as tasks',\n  ERROR_ON_TOGGLE_STATUS: 'Não foi possível atualizar o status deste item',\n  ERROR_ON_DELETE_TASK: 'Não foi possível remover este item da lista',\n  UPDATE_TASK_SUCCESSFULLY: 'Item atualizado com sucesso',\n  DELETE_TASK_SUCCESSFULLY: 'Item removido com sucesso',\n  INSERT_NEW_TASK_SUCCESSFULLY: 'Item inserido com sucesso',\n  INSERT_NEW_TASK_ERROR: 'O item não pode ser inserido.',\n  UPDATE_TASK_ERROR: 'O item não pode ser atualizado.',\n  FETCH_TASKS_FAILED: 'Não foi possível obter a lista de items'\n};\n\nexport const filterTasksMode = {\n  ALL: 'all',\n  DONE: 'done',\n  PENDING: 'pending',\n  TODAY: 'today',\n  THIS_WEEK: 'thisweek',\n  THIS_MONTH: 'thismonth'\n};\n","// Action Types\n\nexport const FETCH_TASKS = 'FETCH_TASKS';\nexport const FETCH_TASKS_SUCCESS = 'FETCH_TASKS_SUCCESS';\nexport const FETCH_TASKS_FAILED = 'FETCH_TASKS_FAILED';\nexport const UPDATE_TASKS_ON_LIST = 'UPDATE_TASKS_ON_LIST';\nexport const TOGGLE_TASK_STATUS = 'TOGGLE_TASK_STATUS';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const INSERT_NEW_TASK = 'INSERT_NEW_TASK';\nexport const UPDATE_TASK = 'UPDATE_TASK';\n\n// Initial state\n\nconst INITIAL_STATE = {\n  data: [],\n  errors: {\n    fetch: []\n  },\n  loading: {\n    fetch: false\n  }\n};\n\n// reducer\nexport default function (state = INITIAL_STATE, action) {\n  const { type, tasks, errors } = action;\n\n  switch (type) {\n    case FETCH_TASKS:\n      return {\n        ...state,\n        loading: {\n          ...state.loading,\n          fetch: true\n        }\n      };\n    case FETCH_TASKS_SUCCESS:\n      return {\n        ...state,\n        data: tasks,\n        loading: {\n          ...state.loading,\n          fetch: false\n        }\n      };\n    case FETCH_TASKS_FAILED:\n      return {\n        ...state,\n        loading: {\n          ...state.loading,\n          fetch: false\n        },\n        errors: {\n          ...state.errors,\n          fetch: errors\n        }\n      };\n    case UPDATE_TASKS_ON_LIST:\n      return {\n        ...state,\n        data: tasks\n      };\n    default:\n      return state;\n  }\n}\n\n// Action Creators\n\nexport function fetchTasksAction() {\n  return { type: FETCH_TASKS };\n}\n\nexport function fetchTasksSuccessAction(tasks) {\n  return { type: FETCH_TASKS_SUCCESS, tasks };\n}\n\nexport function fetchTasksFailedAction(errors) {\n  return { type: FETCH_TASKS_FAILED, errors };\n}\n\nexport function updateTasksOnListAction(tasks) {\n  return { type: UPDATE_TASKS_ON_LIST, tasks };\n}\n\nexport function toggleTaskStatusAction(taskId) {\n  return { type: TOGGLE_TASK_STATUS, taskId };\n}\n\nexport function deleteTaskAction(taskId) {\n  return { type: DELETE_TASK, taskId };\n}\n\nexport function updateTaskAction(values) {\n  return { type: UPDATE_TASK, values };\n}\n\nexport function insertNewTaskAction(values) {\n  return { type: INSERT_NEW_TASK, values };\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport { Icon, Layout, Menu, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport { fetchTasksAction } from './ducks/tasks';\nimport { fetchTagsAction } from './ducks/tags';\nimport { Suspense, lazy } from 'react';\n\nconst DashboardPage =  lazy(() => import(\"./pages/DashboardPage\"));\nconst TodoListPage = lazy(() => import(\"./pages/TodoListPage\"));\nconst TagsPage = lazy(() => import(\"./pages/TagsPage\"));\n\nconst { Sider, Content } = Layout;\n\nfunction App(\n  {\n    callFetchTasks,\n    callFetchTags\n  }\n) {\n  const selectedLink = window.location.pathname.replace('/', '') || 'home';\n  const [initialized, setInitialized] = useState(false);\n\n  useEffect(() => {\n    if (!initialized) {\n      initialize();\n    }\n\n    function initialize() {\n      callFetchTasks();\n      callFetchTags();\n      setInitialized(true);\n    }\n\n  }, [initialized]);\n\n  return (\n    <BrowserRouter>\n      <Layout>\n        <Sider>\n          <div className=\"logo\"></div>\n\n          <Menu theme=\"dark\" defaultSelectedKeys={[selectedLink]} mode=\"inline\">\n            <Menu.Item key=\"home\">\n              <Icon type=\"pie-chart\" />\n              <Link to=\"/\"><span>Dashboard</span></Link>\n            </Menu.Item>\n            <Menu.Item key=\"todo-list\">\n              <Icon type=\"desktop\" />\n              <Link to=\"/todo-list\"><span>Todo list</span></Link>\n            </Menu.Item>\n            <Menu.Item key=\"tags\">\n              <Icon type=\"tags\" />\n              <Link to=\"/tags\"><span>Tags</span></Link>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Content className=\"content\">\n            <article className=\"content-body\">\n              <Suspense\n                fallback={<Spin />}\n              >\n                <Switch>\n                  <Route exact path=\"/\" component={() => <DashboardPage appInitialized={initialized} />} />\n                  <Route path=\"/todo-list\" component={() => <TodoListPage appInitialized={initialized} />} />\n                  <Route path=\"/tags\" component={() => <TagsPage appInitialized={initialized} />} />\n                </Switch>\n              </Suspense>\n            </article>\n          </Content>\n        </Layout>\n      </Layout>\n    </BrowserRouter>\n\n  );\n}\n\nexport default connect(\n  (\n    {\n      tasks\n    }\n  ) => {\n    return {\n      tasks\n    }\n  },\n  dispatch => {\n    return {\n      callFetchTasks() {\n        dispatch(fetchTasksAction());\n      },\n      callFetchTags() {\n        dispatch(fetchTagsAction());\n      }\n    }\n  }\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport NotificationAPI from './integrations/NotificationAPI';\n\nNotificationAPI.initialize();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// Action Types\n\nexport const FETCH_TAGS = 'FETCH_TAGS';\nexport const FETCH_TAGS_SUCCESS = 'FETCH_TAGS_SUCCESS';\nexport const FETCH_TAGS_FAILED = 'FETCH_TAGS_FAILED';\nexport const UPDATE_TAGS_ON_LIST = 'UPDATE_TAGS_ON_LIST';\nexport const DELETE_TAG = 'DELETE_TAG';\nexport const INSERT_NEW_TAG = 'INSERT_NEW_TAG';\n\n// Initial state\n\nexport const INITIAL_STATE = {\n  data: [],\n  errors: {\n    fetch: []\n  },\n  loading: {\n    fetch: false\n  }\n};\n\n// reducer\nexport default function (state = INITIAL_STATE, action) {\n  const { type, tags, errors } = action;\n\n  switch (type) {\n    case FETCH_TAGS:\n      return {\n        ...state,\n        loading: {\n          ...state.loading,\n          fetch: true\n        }\n      };\n    case FETCH_TAGS_SUCCESS:\n      return {\n        ...state,\n        data: tags,\n        loading: {\n          ...state.loading,\n          fetch: false\n        }\n      };\n    case FETCH_TAGS_FAILED:\n      return {\n        ...state,\n        loading: {\n          ...state.loading,\n          fetch: false\n        },\n        errors: {\n          ...state.errors,\n          fetch: errors\n        }\n      };\n    case UPDATE_TAGS_ON_LIST:\n      return {\n        ...state,\n        data: tags\n      };\n    default:\n      return state;\n  }\n}\n\n// Action Creators\n\nexport function fetchTagsAction() {\n  return { type: FETCH_TAGS };\n}\n\nexport function fetchTagsSuccessAction(tags) {\n  return { type: FETCH_TAGS_SUCCESS, tags };\n}\n\nexport function fetchTagsFailedAction(errors) {\n  return { type: FETCH_TAGS_FAILED, errors };\n}\n\nexport function updateTagsOnListAction(tags) {\n  return { type: UPDATE_TAGS_ON_LIST, tags };\n}\n\nexport function deleteTagAction(tagId) {\n  return { type: DELETE_TAG, tagId };\n}\n\nexport function insertNewTagAction(values) {\n  return { type: INSERT_NEW_TAG, values };\n}\n","import { taskStatus } from '../shared/tasksConstantes';\nimport Task from '../classes/Task';\nimport filterMethods from '../shared/tasksFilterMethods';\nimport store from '../store';\nimport { aMinute } from '../shared/timeConstants';\nimport moment from 'moment';\nimport NotificationAPI from '../integrations/NotificationAPI';\n\nclass TasksUtils {\n  static toggleStatus(status) {\n    return status === taskStatus.DONE ? taskStatus.PENDING : taskStatus.DONE;\n  }\n\n  static taskFactory(values) {\n    return new Task(\n      values.status || taskStatus.PENDING,\n      values.description,\n      values.time,\n      values.durationTime,\n      values.rememberTime,\n      values.tags,\n      values.createdAt,\n      values.id\n    );\n  }\n\n  static filterBy(data, method) {\n    const filteredData = filterMethods[method]\n                          ? filterMethods[method](data)\n                          : data;\n\n    return new Promise((resolve) => {\n      resolve(filteredData);\n    });\n  }\n\n  static initializeNotifier() {\n    window.setInterval(() => {\n      const { tasks } = store.getState();\n      const nowTime = +new Date();\n\n      tasks.data.forEach((task) => {\n        const taskOriginalDate = moment(task.time);\n        const taskDate = moment(task.time);\n        const taskRememberTime = taskDate.subtract(task.rememberTime, 'hours').valueOf();\n\n        if (nowTime - taskRememberTime >= 0) {\n          NotificationAPI.notify(\n            'Lembrete de tarefa',\n            `A sua tarefa em ${taskOriginalDate.format('DD/MM/YYYY [às] hh:mm')} se aproxima`\n          );\n        }\n      });\n\n    }, aMinute);\n  }\n}\n\nexport default TasksUtils;\n","export const aSecond = 1000;\nexport const aMinute = aSecond * 60;\nexport const aHour = aMinute * 60;\nexport const aDay = aHour * 24;\n","import { delay } from '../utility/Utils';\nimport { aSecond } from '../shared/timeConstants';\n\nclass NotificationAPI {\n  static Notification = window.Notification;\n\n  static initialize() {\n    if (this.Notification.permission !== 'granted') {\n      this.requestPermission();\n    }\n  }\n\n  static requestPermission() {\n    this.Notification.requestPermission();\n  };\n\n  static notify(title = '', message = '', timeToClose = 4) {\n    const notification = new this.Notification(title, {\n      body: message\n    });\n\n    delay(aSecond * timeToClose)\n      .then(notification.close.bind(notification));\n  }\n}\n\nexport default NotificationAPI;\n","import { combineReducers } from 'redux';\nimport tasks from './ducks/tasks';\nimport tags from './ducks/tags';\n\nconst rootReducer = combineReducers({\n  tasks,\n  tags,\n});\n\nexport default rootReducer;\n","export const apiEndpoint = 'https://5c9122c7c6354a0014037723.mockapi.io';\n\nexport const fetchTasksUrl = `${apiEndpoint}/tasks`;\nexport const fetchTagsUrl = `${apiEndpoint}/tags`;\n","import { fetchTasksUrl } from './Defaults';\n\nclass TasksAPI {\n  static fetchTasks() {\n    return new Promise((resolve, reject) => {\n      fetch(fetchTasksUrl)\n        .then(data => data.json())\n        .then(resolve)\n        .catch(reject);\n    })\n  }\n}\n\nexport default TasksAPI;\n","import { fork, takeLatest, all, call, put } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport {\n  DELETE_TASK,\n  FETCH_TASKS,\n  fetchTasksFailedAction,\n  fetchTasksSuccessAction, INSERT_NEW_TASK,\n  TOGGLE_TASK_STATUS, UPDATE_TASK,\n  updateTasksOnListAction\n} from '../ducks/tasks';\nimport TasksAPI from '../integrations/TasksAPI';\nimport { taskMessages } from \"../shared/tasksConstantes\";\nimport TasksUtils from \"../utility/TasksUtils\";\nimport store from \"../store\";\n\nexport function* fetchTasks() {\n  try {\n    let tasks = yield call(TasksAPI.fetchTasks);\n\n    tasks = yield tasks.map(task => {\n      return TasksUtils.taskFactory(task);\n    });\n\n    yield put(fetchTasksSuccessAction(tasks));\n\n    TasksUtils.initializeNotifier();\n\n  } catch (errors) {\n    put(fetchTasksFailedAction(errors));\n    notification.error({\n      message: taskMessages.FETCH_TASKS_FAILED\n    })\n  }\n}\n\nfunction* toggleTaskStatus({taskId}) {\n  try {\n    const state = store.getState();\n    const updatedTasks = state.tasks.data.map(task => {\n      if (task.id === taskId) {\n        task.status = TasksUtils.toggleStatus(task.status);\n      }\n\n      return task;\n    });\n\n    yield put(updateTasksOnListAction(updatedTasks));\n\n    notification.success({\n      message: taskMessages.UPDATE_TASK_SUCCESSFULLY\n    });\n\n  } catch (errors) {\n    notification.warning({\n      message: taskMessages.ERROR_ON_TOGGLE_STATUS\n    });\n  }\n}\n\nfunction* deleteTask({taskId}) {\n  try {\n    const state = store.getState();\n    const filteredTasks = state.tasks.data.filter(task => {\n      return task.id !== taskId;\n    });\n\n    yield put(updateTasksOnListAction(filteredTasks));\n\n    notification.success({\n      message: taskMessages.UPDATE_TASK_SUCCESSFULLY\n    });\n\n  } catch (errors) {\n    notification.warning({\n      message: taskMessages.ERROR_ON_DELETE_TASK\n    });\n  }\n}\n\nfunction* insertNewTask({values}) {\n  try {\n    const state = store.getState();\n\n    let taskToSave = TasksUtils.taskFactory(values);\n\n    let modifiedTasks = [...state.tasks.data];\n\n    modifiedTasks.push(taskToSave);\n\n    yield put(updateTasksOnListAction(modifiedTasks));\n\n    notification.success({\n      message: taskMessages.INSERT_NEW_TASK_SUCCESSFULLY\n    });\n\n  } catch (errors) {\n    notification.warning({\n      message: taskMessages.INSERT_NEW_TASK_ERROR\n    });\n  }\n}\n\nfunction* updateTask({values}) {\n  try {\n    const state = store.getState();\n\n    let taskToSave = TasksUtils.taskFactory(values);\n    let modifiedTasks = [...state.tasks.data];\n\n    modifiedTasks = modifiedTasks.map(task => {\n      if (task.id === values.id) {\n        return taskToSave;\n      }\n\n      return task;\n    });\n\n    yield put(updateTasksOnListAction(modifiedTasks));\n\n    notification.success({\n      message: taskMessages.UPDATE_TASK_SUCCESSFULLY\n    });\n\n  } catch (errors) {\n    notification.warning({\n      message: taskMessages.UPDATE_TASK_ERROR\n    });\n  }\n}\n\nfunction* fetchTasksSaga() {\n  yield takeLatest(FETCH_TASKS, fetchTasks);\n}\n\nfunction* toggleTaskStatusSaga() {\n  yield takeLatest(TOGGLE_TASK_STATUS, toggleTaskStatus);\n}\n\nfunction* deleteTaskSaga() {\n  yield takeLatest(DELETE_TASK, deleteTask);\n}\n\nfunction* insertNewTaskSaga() {\n  yield takeLatest(INSERT_NEW_TASK, insertNewTask);\n}\n\nfunction* updateTaskSaga() {\n  yield takeLatest(UPDATE_TASK, updateTask);\n}\n\nexport default function* () {\n  yield all([\n    fork(fetchTasksSaga),\n    fork(toggleTaskStatusSaga),\n    fork(deleteTaskSaga),\n    fork(insertNewTaskSaga),\n    fork(updateTaskSaga),\n  ])\n}\n","import { fetchTagsUrl } from './Defaults';\n\nclass TagsAPI {\n  static fetchTags() {\n    return new Promise((resolve, reject) => {\n      fetch(fetchTagsUrl)\n        .then(data => data.json())\n        .then(resolve)\n        .catch(reject);\n    });\n  }\n}\n\nexport default TagsAPI;\n","export const tagMessages = {\n  LOAD_TAG_ERROR: 'Não foi possível carregar as tags',\n  ERROR_ON_TOGGLE_STATUS: 'Não foi possível atualizar o status desta tag',\n  ERROR_ON_DELETE_TAG: 'Não foi possível remover esta tag da lista',\n  UPDATE_TAG_SUCCESSFULLY: 'Tag atualizada com sucesso',\n  DELETE_TAG_SUCCESSFULLY: 'Tag removida com sucesso',\n  INSERT_NEW_TAG_SUCCESSFULLY: 'Tag inserida com sucesso',\n  INSERT_NEW_TAG_ERROR: 'A tag não pode ser inserida.',\n  UPDATE_TAG_ERROR: 'A tag não pode ser atualizada.',\n  FETCH_TAGS_FAILED: 'Não foi possível obter a lista de tags',\n};\n","import Tag from '../classes/Tag';\n\nclass TagsUtils {\n  static tagFactory(values) {\n    return new Tag(\n      values.name,\n      values.createdAt,\n      values.id\n    );\n  }\n}\n\nexport default TagsUtils;\n","import { fork, takeLatest, all, call, put } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport {\n  DELETE_TAG,\n  FETCH_TAGS,\n  fetchTagsFailedAction,\n  fetchTagsSuccessAction, INSERT_NEW_TAG,\n  updateTagsOnListAction\n} from '../ducks/tags';\nimport TagsAPI from '../integrations/TagsAPI';\nimport { tagMessages } from \"../shared/tagsConstantes\";\nimport TagsUtils from \"../utility/TagsUtils\";\nimport store from \"../store\";\n\nfunction* fetchTags() {\n  try {\n    let tags = yield call(TagsAPI.fetchTags);\n\n    tags = yield tags.map(tag => {\n      return TagsUtils.tagFactory(tag);\n    });\n\n    yield put(fetchTagsSuccessAction(tags));\n\n  } catch (errors) {\n    put(fetchTagsFailedAction(errors));\n    notification.error({\n      message: tagMessages.FETCH_TAGS_FAILED\n    })\n  }\n}\n\nfunction* deleteTag({tagId}) {\n  try {\n    const state = store.getState();\n    const filteredTags = state.tags.data.filter(tag => {\n      return tag.id !== tagId;\n    });\n\n    yield put(updateTagsOnListAction(filteredTags));\n\n    notification.success({\n      message: tagMessages.DELETE_TAG_SUCCESSFULLY\n    });\n\n  } catch (errors) {\n    notification.warning({\n      message: tagMessages.ERROR_ON_DELETE_TAG\n    });\n  }\n}\n\nfunction* insertNewTag({values}) {\n  try {\n    const state = store.getState();\n\n    let tagToSave = TagsUtils.tagFactory(values);\n\n    let modifiedTags = [...state.tags.data];\n\n    modifiedTags.push(tagToSave);\n\n    yield put(updateTagsOnListAction(modifiedTags));\n\n    notification.success({\n      message: tagMessages.INSERT_NEW_TAG_SUCCESSFULLY\n    });\n\n  } catch (errors) {\n    notification.warning({\n      message: tagMessages.INSERT_NEW_TAG_ERROR\n    });\n\n    console.log(errors);\n  }\n}\n\nfunction* fetchTagsSaga() {\n  yield takeLatest(FETCH_TAGS, fetchTags);\n}\n\nfunction* deleteTagSaga() {\n  yield takeLatest(DELETE_TAG, deleteTag);\n}\n\nfunction* insertNewTagSaga() {\n  yield takeLatest(INSERT_NEW_TAG, insertNewTag);\n}\n\nexport default function* () {\n  yield all([\n    fork(fetchTagsSaga),\n    fork(deleteTagSaga),\n    fork(insertNewTagSaga),\n  ])\n}\n","import { all, fork } from 'redux-saga/effects';\nimport tasksSaga from './sagas/tasksSaga';\nimport tagsSaga from './sagas/tagsSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    fork(tasksSaga),\n    fork(tagsSaga),\n  ])\n}\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./rootReducer\";\nimport rootSaga from \"./rootSaga\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(sagaMiddleware)\n  )\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import { filterTasksMode, taskStatus } from './tasksConstantes';\nimport moment from 'moment';\n\nconst methods = {};\n\nmethods[filterTasksMode.ALL] = (data) => {\n  return data;\n};\n\nmethods[filterTasksMode.DONE] = (data) => {\n  return data.filter(item => item.status === taskStatus.DONE);\n};\n\nmethods[filterTasksMode.PENDING] = (data) => {\n  return data.filter(item => item.status === taskStatus.PENDING);\n};\n\nmethods[filterTasksMode.TODAY] = (data) => {\n  const now = new Date();\n  return data.filter(item => {\n    const itemTime = new Date(item.time);\n\n    return now.getDate() === itemTime.getDate()\n            && now.getMonth() === itemTime.getMonth()\n            && now.getFullYear() === itemTime.getFullYear()\n  });\n};\n\nmethods[filterTasksMode.THIS_WEEK] = (data) => {\n  const today = new Date();\n  const currentWeekDay = today.getDay();\n  const daysLimitBefore = currentWeekDay;\n  const daysLimitAfter = 7 - currentWeekDay;\n\n  const daysBeforeTime = moment().subtract(daysLimitBefore, 'days').valueOf();\n  const daysAfterTime = moment().add(daysLimitAfter, 'days').valueOf();\n\n  return data.filter(item => {\n    const itemTime = +new Date(item.time);\n\n    return itemTime >= daysBeforeTime && itemTime <= daysAfterTime;\n  });\n};\n\nmethods[filterTasksMode.THIS_MONTH] = (data) => {\n  const today = new Date();\n  const currentMonth = today.getMonth();\n  const currentYear = today.getFullYear();\n\n  return data.filter(item => {\n    const itemDate = new Date(item.time);\n\n    return itemDate.getFullYear() === currentYear && itemDate.getMonth() === currentMonth;\n  });\n};\n\nexport default methods;\n"],"sourceRoot":""}
